<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Daily Journaling App</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background-color: #000; /* dark background to highlight dots */
      color: white;
    }
    #three-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
    }
    .content {
      position: relative;
      z-index: 10;
      padding: 2rem;
    }
    form {
      margin-bottom: 1rem;
    }
    textarea {
      width: 100%;
      height: 100px;
    }
    ul {
      list-style-type: disc;
      padding-left: 2rem;
    }
  </style>
</head>
<body>
  <div id="three-container"></div>

  <div class="content">
    <%- headingContent %>

    <form action="/submit" method="POST">
      <textarea name="Blog-content" placeholder="Write your thoughts here..."></textarea>
      <br>
      <button type="submit">Submit</button>
    </form>

    <h2>Previous Entries:</h2>
    <ul>
      <% activities.forEach(function(activity){ %>
        <li><%= activity %></li>
      <% }); %>
    </ul>
  </div>

 <script src="https://cdn.jsdelivr.net/npm/three@0.157.0/build/three.min.js"></script>
<script>
  const canvas = document.createElement("canvas");
  document.getElementById("three-container").appendChild(canvas);

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  // Particles
  const particlesCount = 500;
  const geometry = new THREE.BufferGeometry();
  const positions = [];

  for (let i = 0; i < particlesCount; i++) {
    positions.push((Math.random() - 0.5) * 20);
    positions.push((Math.random() - 0.5) * 20);
    positions.push((Math.random() - 0.5) * 20);
  }

  geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));

  const material = new THREE.PointsMaterial({ color: 0x00ffc8, size: 0.05 });
  const points = new THREE.Points(geometry, material);
  scene.add(points);

  // Brain Sphere
  const sphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);
  const sphereMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff,
    wireframe: true,
    opacity: 0.2,
    transparent: true
  });
  const brain = new THREE.Mesh(sphereGeometry, sphereMaterial);
  scene.add(brain);

  camera.position.z = 10;

  // Animate
  function animate() {
    requestAnimationFrame(animate);
    brain.rotation.y += 0.005;
    points.rotation.y += 0.0005;
    renderer.render(scene, camera);
  }

  // Mouse interaction
  window.addEventListener("mousemove", (event) => {
    const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
    const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
    brain.rotation.x = mouseY * 0.5;
    brain.rotation.y = mouseX * 0.5;
  });

  // Resize
  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  animate();
</script>

</body>
</html>